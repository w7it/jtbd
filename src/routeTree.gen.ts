/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserRouteImport } from './routes/_user'
import { Route as GuestRouteImport } from './routes/_guest'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GuestSignUpRouteImport } from './routes/_guest.sign-up'
import { Route as GuestSignInRouteImport } from './routes/_guest.sign-in'
import { ServerRoute as ApiMcpServerRouteImport } from './routes/api/mcp'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const UserRoute = UserRouteImport.update({
  id: '/_user',
  getParentRoute: () => rootRouteImport,
} as any)
const GuestRoute = GuestRouteImport.update({
  id: '/_guest',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GuestSignUpRoute = GuestSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => GuestRoute,
} as any)
const GuestSignInRoute = GuestSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => GuestRoute,
} as any)
const ApiMcpServerRoute = ApiMcpServerRouteImport.update({
  id: '/api/mcp',
  path: '/api/mcp',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sign-in': typeof GuestSignInRoute
  '/sign-up': typeof GuestSignUpRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sign-in': typeof GuestSignInRoute
  '/sign-up': typeof GuestSignUpRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_guest': typeof GuestRouteWithChildren
  '/_user': typeof UserRoute
  '/_guest/sign-in': typeof GuestSignInRoute
  '/_guest/sign-up': typeof GuestSignUpRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sign-in' | '/sign-up'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sign-in' | '/sign-up'
  id:
    | '__root__'
    | '/'
    | '/_guest'
    | '/_user'
    | '/_guest/sign-in'
    | '/_guest/sign-up'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  GuestRoute: typeof GuestRouteWithChildren
  UserRoute: typeof UserRoute
}
export interface FileServerRoutesByFullPath {
  '/api/mcp': typeof ApiMcpServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/mcp': typeof ApiMcpServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/mcp': typeof ApiMcpServerRoute
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/mcp' | '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/mcp' | '/api/auth/$'
  id: '__root__' | '/api/mcp' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiMcpServerRoute: typeof ApiMcpServerRoute
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_user': {
      id: '/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_guest': {
      id: '/_guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_guest/sign-up': {
      id: '/_guest/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof GuestSignUpRouteImport
      parentRoute: typeof GuestRoute
    }
    '/_guest/sign-in': {
      id: '/_guest/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof GuestSignInRouteImport
      parentRoute: typeof GuestRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/mcp': {
      id: '/api/mcp'
      path: '/api/mcp'
      fullPath: '/api/mcp'
      preLoaderRoute: typeof ApiMcpServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface GuestRouteChildren {
  GuestSignInRoute: typeof GuestSignInRoute
  GuestSignUpRoute: typeof GuestSignUpRoute
}

const GuestRouteChildren: GuestRouteChildren = {
  GuestSignInRoute: GuestSignInRoute,
  GuestSignUpRoute: GuestSignUpRoute,
}

const GuestRouteWithChildren = GuestRoute._addFileChildren(GuestRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  GuestRoute: GuestRouteWithChildren,
  UserRoute: UserRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiMcpServerRoute: ApiMcpServerRoute,
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
